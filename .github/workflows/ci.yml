name: Continuous integration

on:
  push:
    branches:
      - 'main'
  pull_request:
    types: [opened, synchronize]

jobs:
  ci:
    name: 'install, build, lint, test'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v1
      with:
        node-version: '14'
        cache: npm

    - name: List all packages
      id: all-packages
      run: |
        PACKAGES=$(ls -d packages/* | paste -sd "," -)
        echo "::set-output name=packages::$PACKAGES"

    - name: List pull packages
      id: packages
      uses: actions/github-script@v2
      env:
        PACKAGES_PUSH: ${{ steps.all-packages.outputs.packages }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          if (context.eventName !== 'pull_request') {
            console.log(`::set-output name=onlyOne::false`);
            console.log(`::set-output name=packages::${process.env.PACKAGES_PUSH}`);
            return;
          }

          const { data: pullLabels } = await github.issues.listLabelsOnIssue({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            per_page: 100,
          });

          const labels = pullLabels.map(label => label.name);
          const packageLabels = labels.filter(name => name.includes('packages/'));

          if (packageLabels.length === 1) {
            console.log(`::set-output name=onlyOne::true`);
            console.log(`::set-output name=packages::${packageLabels[0]}`);
            return;
          }

          console.log(`::set-output name=onlyOne::false`);
          console.log(`::set-output name=packages::${process.env.PACKAGES_PUSH}`);

    - name: Install
      if: steps.node-modules-cache.outputs.cache-hit != 'true'
      env:
        PACKAGES: ${{ steps.packages.outputs.packages }}
      run: |
        for PACKAGE in ${PACKAGES//,/ }; do
          echo $PACKAGE
          (cd $PACKAGE; npm ci)
        done

    - name: Lint
      env:
        PACKAGES: ${{ steps.packages.outputs.packages }}
      run: |
        for PACKAGE in ${PACKAGES//,/ }; do
          echo $PACKAGE
          (cd $PACKAGE; npm run lint:js)
        done

    - name: Test
      env:
        PACKAGES: ${{ steps.packages.outputs.packages }}
      run: |
        for PACKAGE in ${PACKAGES//,/ }; do
          echo $PACKAGE
          (cd $PACKAGE; npm test test:js)
        done

    - name: Build
      env:
        PACKAGES: ${{ steps.packages.outputs.packages }}
      run: |
        for PACKAGE in ${PACKAGES//,/ }; do
          echo $PACKAGE

          (cd $PACKAGE; npm run build)
        done

    - name: Create tarball
      if: steps.packages.outputs.onlyOne == 'true'
      env:
        PACKAGE: ${{ steps.packages.outputs.packages }}
      run: |
        echo $PACKAGE
        cd $PACKAGE

        # compute canary versions
        NOW=$(date +%s%3N)

        CURRENT_VERSION=$(cat package.json | jq -r '.version')
        NEW_VERSION=$CURRENT_VERSION-canary-$COMMIT-$NOW

        npm version --no-git-tag-version $NEW_VERSION

        # pack
        PACKAGE=$(npm pack)

        mv $PACKAGE package.tgz

        echo "${{ github.ref }}" > ref
        echo "${{ github.ref }}-${{ github.sha }}" > npm-tag

    - name: Publish artifact
      if: steps.packages.outputs.onlyOne == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: package
        path: |
          ${{ steps.packages.outputs.packages }}/package.tgz
          ${{ steps.packages.outputs.packages }}/ref
          ${{ steps.packages.outputs.packages }}/npm-tag

